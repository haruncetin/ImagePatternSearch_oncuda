CC = clang
NVCC = nvcc

SRC_DIR = src
BUILD_DIR = build

DEBUG_DIR = $(BUILD_DIR)/debug
RELEASE_DIR = $(BUILD_DIR)/release
INCLUDE_DIRS = .
LIB_DIRS = .

CFLAGS_COMMON = -std=c17
NVCCFLAGS_COMMON = -std=c++17
CFLAGS_DEBUG = -g -DDEBUG
CFLAGS_RELEASE = -O3

LDFLAGS_COMMON =
LDFLAGS_DEBUG =
LDFLAGS_RELEASE =

C_FILES = $(wildcard $(SRC_DIR)/*.c)
CU_FILES = $(wildcard $(SRC_DIR)/*.cu)

OBJS_DEBUG = $(CU_FILES:$(SRC_DIR)/.cu=$(DEBUG_DIR)/.o) $(C_FILES:$(SRC_DIR)/.c=$(DEBUG_DIR)/.o)
OBJS_RELEASE = $(CU_FILES:$(SRC_DIR)/.cu=$(RELEASE_DIR)/.o) $(C_FILES:$(SRC_DIR)/.c=$(RELEASE_DIR)/.o)

TARGET = psearch

TARGET_DEBUG = $(DEBUG_DIR)/$(TARGET)
TARGET_RELEASE = $(RELEASE_DIR)/$(TARGET)

.PHONY: build-all build-debug build-release clean

build-all: build-debug build-release clean

build-debug: $(TARGET_DEBUG)

build-release: $(TARGET_RELEASE)

$(TARGET_DEBUG): $(OBJS_DEBUG)
	$(NVCC) $(NVCCFLAGS_COMMON) $(CFLAGS_DEBUG) -o $@ $^ $(LDFLAGS_COMMON) $(LDFLAGS_DEBUG) -L$(LIB_DIRS)

$(TARGET_RELEASE): $(OBJS_RELEASE)
	$(NVCC) $(NVCCFLAGS_COMMON) $(CFLAGS_RELEASE) -o $@ $^ $(LDFLAGS_COMMON) $(LDFLAGS_RELEASE) -L$(LIB_DIRS)

$(DEBUG_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS_COMMON) $(CFLAGS_DEBUG) -c -o $@ $< -I$(INCLUDE_DIRS)

$(RELEASE_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS_COMMON) $(CFLAGS_RELEASE) -c -o $@ $< -I$(INCLUDE_DIRS)

$(DEBUG_DIR)/%.o: $(SRC_DIR)/%.cu
	$(NVCC) $(NVCCFLAGS_COMMON) $(CFLAGS_DEBUG) -c -o $@ $< -I$(INCLUDE_DIRS)

$(RELEASE_DIR)/%.o: $(SRC_DIR)/%.cu
	$(NVCC) $(NVCCFLAGS_COMMON) $(CFLAGS_RELEASE) -c -o $@ $< -I$(INCLUDE_DIRS)

$(OBJS_DEBUG): init-dirs

$(OBJS_RELEASE): init-dirs

init-dirs:
	mkdir -p $(BUILD_DIR)
	mkdir -p $(DEBUG_DIR)
	mkdir -p $(RELEASE_DIR)

clean:
	rm -f $(DEBUG_DIR)/*.o $(RELEASE_DIR)/*.o

clean-all:
	rm -rf $(BUILD_DIR)

run:
	$(TARGET_RELEASE) $(ARGS)

debug:
	@lldb $(TARGET_DEBUG) $(ARGS)
